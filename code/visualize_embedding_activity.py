import torchimport torch.nn.functional as Ffrom constants import *from utils import *fix_esm_path()import esmimport matplotlib.pyplot as pltimport seaborn as snsimport torchimport torch.nn as nnimport torch.nn.functional as Ffrom rosetta_former.energy_vqvae import *from dataset import *from sklearn import manifoldfrom sklearn.decomposition import PCAimport warningswarnings.filterwarnings("ignore", category=FutureWarning)base_dataset_path = "/Users/itayta/Desktop/prot_stuff/fitness_lndscp/fitness_learning/data/datasets/random_100k_train"dataset = EsmGfpDataset(sequences_path="%s/sequences.csv" % base_dataset_path,                        embeddings_path="%s/embeddings" % base_dataset_path,                        embedding_layer = -1,                        tokens_path="%s/tokens" % base_dataset_path,                        mode="embeddings")color_dict = {"[0,0,0,0,0,0,1]": "#ffbb00",              "[0,0,0,0,0,1,0]": "#ffbb00",              "[0,0,0,0,1,0,0]": "#0ffbff",              "[0,0,0,1,0,0,0]": "#0ffbff",              "[0,0,1,0,0,0,0]": "#00ff33",              "[0,1,0,0,0,0,0]": "#00ff33",              "[1,0,0,0,0,0,0]": "#b5b5b5"}# color_dict = {"[0,1]": "#00ff33",#               "[1,0]": "#b5b5b5"}colors = [color_dict["".join(str([int(x) for x in dataset[i][1].tolist()]).split(" "))] for i in range(len(dataset))]avg_pool = nn.AvgPool1d(1, stride=1)act = np.where(np.array(colors) != "#b5b5b5")inact = np.where(np.array(colors) == "#b5b5b5")hbonds_all_residues = [14, 16, 18, 42, 44, 46, 61, 64, 68, 69, 72, 108, 110, 112, 119, 123, 145, 150, 163, 165, 167, 181, 185, 201, 220, 224]    nohbonds_all_residues = [42, 44, 61, 62, 69, 92, 94, 96, 112, 121, 145, 148, 150, 163, 165, 167, 181, 183, 185, 203, 205, 220, 222, 224]designable = set(nohbonds_all_residues + hbonds_all_residues)designable = sorted([x for x in designable])dataset = EsmGfpDataset(sequences_path="%s/sequences.csv" % base_dataset_path,                        embeddings_path="%s/embeddings" % base_dataset_path,                        embedding_layer = -1,                        tokens_path="%s/tokens" % base_dataset_path,                        mode="embeddings")#tmp = [dataset[i][0].mean(axis=0) for i in range(len(dataset))]#tmp = [avg_pool(dataset[i][0].transpose(0,1)).flatten() for i in range(len(dataset))]tmp = [dataset[i][0][np.array(designable),:].flatten() for i in range(len(dataset))]stacked_avg_pool = torch.stack(tmp, dim=0)tsne = manifold.TSNE(n_components=2, perplexity=20)fit_t = tsne.fit_transform(stacked_avg_pool)plt.scatter(fit_t[:,0], fit_t[:,1], color=colors)plt.scatter(fit_t[act,0], fit_t[act,1], color=np.array(colors)[act])plt.scatter(fit_t[inact,0], fit_t[inact,1], color=np.array(colors)[inact])plt.show()pca = PCA(n_components=2)  # Reduce to 2 principal componentsX_pca = pca.fit_transform(stacked_avg_pool)plt.scatter(X_pca[:, 0], X_pca[:, 1], color=np.array(colors))plt.scatter(X_pca[act, 0], X_pca[act, 1], color=np.array(colors)[act])